// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SamuraiAPI.Data;

#nullable disable

namespace SamuraiAPI.Data.Migrations
{
    [DbContext(typeof(SamuraiDbContext))]
    partial class SamuraiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ElementSword", b =>
                {
                    b.Property<int>("ElementsId")
                        .HasColumnType("int");

                    b.Property<int>("SwordsId")
                        .HasColumnType("int");

                    b.HasKey("ElementsId", "SwordsId");

                    b.HasIndex("SwordsId");

                    b.ToTable("ElementSword");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.Samurai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Samurais");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.Sword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SamuraiId")
                        .HasColumnType("int");

                    b.Property<string>("SwordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SamuraiId");

                    b.ToTable("Swords");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.SwordElement", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<int>("SwordId")
                        .HasColumnType("int");

                    b.ToView("SwordElemets");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.SwordType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SwordId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SwordId")
                        .IsUnique();

                    b.ToTable("SwordTypes");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ElementSword", b =>
                {
                    b.HasOne("SamuraiAPI.Domain.Element", null)
                        .WithMany()
                        .HasForeignKey("ElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamuraiAPI.Domain.Sword", null)
                        .WithMany()
                        .HasForeignKey("SwordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamuraiAPI.Domain.Sword", b =>
                {
                    b.HasOne("SamuraiAPI.Domain.Samurai", "Samurai")
                        .WithMany("Swords")
                        .HasForeignKey("SamuraiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Samurai");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.SwordType", b =>
                {
                    b.HasOne("SamuraiAPI.Domain.Sword", null)
                        .WithOne("SwordType")
                        .HasForeignKey("SamuraiAPI.Domain.SwordType", "SwordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamuraiAPI.Domain.Samurai", b =>
                {
                    b.Navigation("Swords");
                });

            modelBuilder.Entity("SamuraiAPI.Domain.Sword", b =>
                {
                    b.Navigation("SwordType")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
